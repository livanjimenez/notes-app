{"version":3,"sources":["components/Header.js","components/TodoList.js","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["header","textAlign","fontSize","padding","fontFamily","color","Header","react_default","a","createElement","style","TodoList","this","props","inputElement","current","focus","className","onSubmit","addItem","inputStyle","placeholder","ref","value","currentItem","text","onChange","handleInput","Button","type","Component","backgroundColor","TodoItems","createTasks","item","key","onClick","_this","deleteItem","listItems","entries","map","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","React","createRef","filteredItems","state","items","filter","setState","e","console","log","target","Date","now","el","preventDefault","newItem","concat","toConsumableArray","callBackend","asyncToGenerator","regenerator_default","mark","_callee","response","body","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","data","_this2","then","res","myBackend","catch","err","components_Header","Container","maxWidth","Box","bgcolor","boxShadow","components_TodoList","components_TodoItems","filler","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4505bdfe.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (<h1 style={header}>Notes</h1>);\r\n}\r\n\r\nconst header = {\r\n    textAlign: 'center',\r\n    fontSize: '4em',\r\n    padding: '3% 3%',\r\n    fontFamily: 'Beth Ellen, cursive',\r\n    color: 'white',\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nclass TodoList extends Component {\r\n  componentDidUpdate() {\r\n    this.props.inputElement.current.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todoListMain\">\r\n        <div className=\"todoHeader\">\r\n          <form onSubmit={this.props.addItem}>\r\n            <input style={inputStyle} placeholder=\"Note\"\r\n              ref={this.props.inputElement}\r\n              value={this.props.currentItem.text}\r\n              onChange={this.props.handleInput}\r\n            />\r\n            <Button type=\"submit\">\r\n              New Idea\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst inputStyle = {\r\n  backgroundColor: '#ede7f6',\r\n};\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\r\n\r\nclass TodoItems extends Component {\r\n  createTasks = item => {\r\n    return (\r\n      <li key={item.key} onClick={() => this.props.deleteItem(item.key)}>\r\n        {item.text}\r\n      </li>\r\n    )\r\n  }\r\n  render() {\r\n    const todoEntries = this.props.entries\r\n    const listItems = todoEntries.map(this.createTasks)\r\n\r\n    return <ul className=\"theList\">{listItems}</ul>\r\n  }\r\n}\r\n\r\nexport default TodoItems;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport TodoItems from './components/TodoItems';\nimport { Container, Box } from '@material-ui/core';\nimport './App.css';\nimport './todoStyles.css'\nimport { boxShadow, textAlign } from '@material-ui/system';\n\nclass App extends Component {\n  inputElement = React.createRef();\n  constructor() {\n    super();\n\n    this.state = {\n      data: null,\n      items: [],\n      currentItem: { text: '', key: '' },\n    };\n  }\n\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(item => {\n      return item.key !== key\n    });\n    this.setState({\n      items: filteredItems,\n    });\n  }\n\n  handleInput = e => {\n    console.log('input recorded');\n\n    const itemText = e.target.value;\n    const currentItem = { text: itemText, key: Date.now() }\n\n    this.setState({ currentItem });\n  }\n\n  addItem = (el) => {\n    console.log('item added');\n\n    el.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== '') {\n      const items = [...this.state.items, newItem]\n      this.setState({\n        items: items,\n        currentItem: { text: '', key: '' },\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.callBackend()\n      .then(res => this.setState({ data: res.myBackend }))\n      .catch(err => console.log(err));\n  }\n\n  callBackend = async () => {\n    const response = await fetch('/backend');\n    const body = await response.json();\n\n    if (response.status !== 200)\n      throw Error(body.message);\n\n    return body;\n  };\n\n  render() {\n    return (\n      <body>\n        <Header />\n\n        <Container maxWidth=\"xs\">\n\n          <Box\n            color=\"primary.main\"\n            bgcolor=\"background.paper\"\n            boxShadow={3}\n            textAlign=\"center\"\n          >\n            <TodoList\n              addItem={this.addItem}\n              inputElement={this.inputElement}\n              handleInput={this.handleInput}\n              currentItem={this.state.currentItem}\n            />\n            <TodoItems entries={this.state.items} deleteItem={this.deleteItem} />\n          </Box>\n\n        </Container>\n\n        <div style={filler}></div>\n      </body>\n    );\n  }\n}\n\nconst filler = {\n  padding: '5%',\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}